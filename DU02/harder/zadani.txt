Úkolem je vytvořit program, který bude zpracovávat čísla zapsaná v různých číselných soustavách v zadaném intervalu hodnot. Úloha je rozšířením jednodušší varianty, v této variantě budou zpracovávána čísla v různých číselných soustavách.

Jedna instance řešeného problému je zadaná základem číselné soustavy R, dolní mezí intervalu LO a horní mezí intervalu HI. Představme si všechna celá čísla z intervalu <LO;HI> postupně zapsaná vedle sebe v soustavě o základu R. Takto zapsaná čísla vytvoří sekvenci číslic. Program bude mít za úkol spočítat následující:

celkovou délku této sekvence (počet cifer),
určit počet nul v této sekvenci,
určit nejdelší kontinuální posloupnost nul v této sekvenci.
Například pro vstup r4:<10;20> by se jednalo o sekvenci čísel 10 až 20 zapsaných ve čtyřkové soustavě, tedy:

  22 23 30 31 32 33 100 101 102 103 110 
Taková sekvence má celkem 27 cifer, z toho 7 nul a nejdelší kontinuální sekvence nul má délku 2. Podobně pro pro vstup r13:<10;20> by se jednalo o sekvenci čísel 10 až 20 zapsaných ve třináctkové soustavě, tedy:
  A B C 10 11 12 13 14 15 16 17 
Taková sekvence má celkem 19 cifer, z toho 1 nulu a nejdelší kontinuální sekvence nul má délku 1.
Vstupem programu je zadání problémů k vyřešení. Problémů k vyřešení může být zadáno obecně mnoho. Pro každý problém k vyřešení je zadán základ číselné soustavy, interval hodnot a požadovaná operace. Zadání má jednu ze dvou forem:

rR: <LO;HI> OP
<LO;HI> OP
kde R je celé desítkové číslo udávající základ číselné soustavy. Pokud je vynecháno (druhá zkrácená forma), bude základ soustavy R=10. Hodnoty LO a HI jsou celá desítková čísla vymezující analyzovaný interval hodnot a OP je požadovaná operace:
l pro výpočet celkové délky sekvence (počtu cifer),
z pro výpočet počtu nul v sekvenci,
s pro výpočet nejdelší kontinuální sekvence nul.
Na vstupu je zadáno mnoho problémů k vyřešení, program načítá vstup a pro každý úspěšně zpracovanou instanci problému zobrazí požadovaný výsledek. Čtení a zpracovávání zadaných problémů skončí v okamžiku dosažení konce vstupu (EOF).

Výstupem programu je vypočtená informace podle problému na vstupu. Přesný formát výpisu je vidět v ukázkovém běhu programu.

Pokud je vstup neplatný, program to musí detekovat a zobrazit chybové hlášení. Chybové hlášení zobrazujte na standardní výstup (ne na chybový výstup). Za chybu považujte:

nečíselné zadání mezí intervalu nebo základu soustavy (neplatné číslo),
mez intervalu je záporné číslo,
dolní mez intervalu je větší než horní mez,
základ soustavy není z intervalu 2 až 36,
požadovaná operace není žádná z l, z, s,
chybí nebo přebývá nějaký oddělovač (lomená závorka, středník).
Ukázka práce programu:
Zadejte intervaly:
<0;100> l
Cifer: 193
<0;100> z
Nul: 12
<0;100> s
Sekvence: 2
r2:<11;21> l
Cifer: 50
r2:<11;21> z
Nul: 22
r2:<11;21> s
Sekvence: 4
r4:<10;20> l
Cifer: 27
r4:<10;20> z
Nul: 7
r4:<10;20> s
Sekvence: 2
r 3 : < 70 ; 112 > l
Cifer: 204
r 3 : < 70 ; 112 > z
Nul: 70
r 3 : < 70 ; 112 > s
Sekvence: 4
r10: <6; 100> l
Cifer: 187
r10: <6; 100> z
Nul: 11
r10: <6; 100> s
Sekvence: 2
r36 :<44;144> l
Cifer: 202
r36 :<44;144> z
Nul: 3
r36 :<44;144> s
Sekvence: 1
Zadejte intervaly:
<10;10> l
Cifer: 2
<10;10> z
Nul: 1
<10;10> s
Sekvence: 1
r19:<61;61> l
Cifer: 2
r19:<61;61> z
Nul: 0
r19:<61;61> s
Sekvence: 0
r44:<3,16> l
Nespravny vstup.
Zadejte intervaly:
<31;27> l
Nespravny vstup.
Zadejte intervaly:
33;41 z
Nespravny vstup.
Zadejte intervaly:
<33;asdf> s
Nespravny vstup.
Poznámky:
Ukázkové běhy zachycují očekávané výpisy Vašeho programu (tučné písmo) a vstupy zadané uživatelem (základní písmo). Zvýraznění tučným písmem je použité pouze zde na stránce zadání, aby byl výpis lépe čitelný. Váš program má za úkol pouze zobrazit text bez zvýrazňování (bez HTML markupu).
Znak odřádkování (\n) je i za poslední řádkou výstupu (i za případným chybovým hlášením).
Úlohu lze vyřešit bez použití funkcí. Pokud ale správně použijete funkce, bude program přehlednější a bude se snáze ladit.
Pro zvládnutí úlohy v povinných a nepovinných testech postačuje naivní algoritmus. Algoritmus prochází zadaný interval hodnot a analyzuje jednotlivá čísla. Pro implementaci tohoto algoritmu potřebujete pouze podmínky, cykly a několik proměnných typu celé číslo. Nejsou potřeba řetězce ani pole. Určitě není vhodné (a není ani potřeba) v paměti programu vytvářet řetězec s celou vygenerovanou binární sekvencí. Naopak, vytvoření této sekvence program pouze zkomplikuje a velmi zpomalí jeho běh.
Test rychlosti #1 počítá pouze celkovou délku sekvence, ale pro velmi dlouhé intervaly. Naivní algoritmus zde nestačí, implementace překročí maximální dobu běhu. Pro zvládnutí tohoto testu je potřeba efektivnější algoritmus výpočtu celkové délky sekvence. Takový algoritmus nebude procházet všechna čísla ze zadaného intervalu, ale dokáže určit výsledek rovnou z mezí zadaného intervalu. Ostatní operace (počet nul a nejdelší kontinuální sekvence nul) v tomto testu nejsou testované. Tento test je bonusový. Pokud Vaše implementace zvládnete tento test, bude odměněna body navíc (nad nominálních 100%).
Test rychlosti #2 počítá všechna zadání (celková délka sekvence, počet nul i kontinuální sekvence nul) pro velmi dlouhé intervaly. Naivní algoritmy zde nestačí, implementace překročí maximální dobu běhu. Efektivní algoritmy jsou potřeba pro všechny tři zadávané operace. Při implementaci se pak hodí několik malých polí (velikosti cca 100 prvků) pro uložení hodnot mezivýsledků. Test je opět bonusový, jeho zvládnutí přinese body navíc nad nominálních 100%.
Číselné vstupní hodnoty jsou zadávané tak, aby se vešly do rozsahu datového typu int. V povinných i nepovinných testech postačuje datový typ int i pro ukládání výsledků. V bonusových testech jsou zadávané velké intervaly hodnot, tam již datový typ int pro výsledky nestačí. Pokud chcete řešit úlohu i s bonusovými testy, použijte pro reprezentaci výsledků datový typ long long int.
Při programování si dejte pozor na přesnou podobu výpisů. Výstup Vašeho programu kontroluje stroj, který požaduje přesnou shodu výstupů Vašeho programu s výstupy referenčními. Za chybu je považováno, pokud se výpis liší. I chybějící nebo přebývající mezera/odřádkování je považováno za chybu. Abyste tyto problémy rychle vyloučili, použijte přiložený archiv se sadou vstupních a očekávaných výstupních dat. Podívejte se na videotutoriál (materiály -> cvičebnice -> video tutoriály), jak testovací data použít a jak testování zautomatizovat.
Váš program bude spouštěn v omezeném testovacím prostředí. Je omezen dobou běhu (limit je vidět v logu referenčního řešení) a dále je omezena i velikost dostupné paměti (ale tato úloha by ani s jedním omezením neměla mít problém). Testovací prostředí dále zakazuje používat některé "nebezpečné funkce" -- funkce pro spouštění programu, pro práci se sítí, ... Pokud jsou tyto funkce použité, program se nespustí. Možná ve svém programu používáte volání:

  int main ( int argc, char * argv [] )
  {
   
    ...
       
    system ( "pause" ); /* aby se nezavrelo okno programu */
    return 0;
  }
  
Toto nebude v testovacím prostředí fungovat - je zakázáno spouštění jiného programu. (I pokud by se program spustil, byl by odmítnut. Nebyl by totiž nikdo, kdo by pauzu "odmáčkl", program by čekal věčně a překročil by tak maximální dobu běhu.) Pokud tedy chcete zachovat pauzu pro testování na Vašem počítači a zároveň chcete mít jistotu, že program poběží správně, použijte následující trik:

  int main ( int argc, char * argv [] )
  {
   
    ...
  
  #ifndef __PROGTEST__
    system ( "pause" ); /* toto progtest "nevidi" */
  #endif /* __PROGTEST__ */
    return 0;
  } 
  
Slovní popis struktury platných vstupních dat není zcela exaktní. Proto připojujeme i formální popis vstupního jazyka v EBNF:
    input      ::= full | short 
    full       ::= { whiteSpace } 'r' { whiteSpace } integer { whiteSpace } ':' short
    short      ::= { whiteSpace } '<' { whiteSpace } integer { whiteSpace } ';' 
                   { whiteSpace } integer { whiteSpace } '>' { whiteSpace } operation { whiteSpace }
    whiteSpace ::= ' ' | '\t' | '\n' | '\r'
    operation  ::= 'l' | 'z' | 's'
    integer    ::= digit { digit }
    digit      ::= '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9'
  
